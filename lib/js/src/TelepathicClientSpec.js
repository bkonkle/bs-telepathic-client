// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Jest              = require("bs-jest/lib/js/src/jest.js");
var Js_exn            = require("bs-platform/lib/js/js_exn.js");
var Js_option         = require("bs-platform/lib/js/js_option.js");
var TelepathicUtils   = require("./TelepathicUtils.js");
var TelepathicClient  = require("./TelepathicClient.js");
var TelepathicActions = require("./TelepathicActions.js");

describe("Client", (function () {
        describe("register(client)", (function () {
                return Jest.test("registers the linkId with the server", (function () {
                              var expectedLinkId = "test-uuid";
                              var handleMessage = function (message) {
                                var json;
                                try {
                                  json = JSON.parse(message);
                                }
                                catch (_exn){
                                  json = Js_exn.raiseError("Unable to parse message");
                                }
                                var action;
                                try {
                                  action = Js_option.getExn(TelepathicActions.decode(json));
                                }
                                catch (_exn$1){
                                  action = Js_exn.raiseError("Unable to decode action");
                                }
                                TelepathicUtils.expectMatches("Wrong key", "CLIENT_REGISTER", TelepathicActions.key(action));
                                switch (action.tag | 0) {
                                  case 0 : 
                                  case 1 : 
                                      return Js_exn.raiseError("Wrong action");
                                  case 2 : 
                                      return TelepathicUtils.expectMatches("Wrong linkId", expectedLinkId, action[0]);
                                  
                                }
                              };
                              var socket = /* Some */[{
                                  send: handleMessage,
                                  on: (function () {
                                      return /* () */0;
                                    })
                                }];
                              var client = TelepathicClient.make(/* Some */[socket], expectedLinkId, "test-url");
                              var run = function () {
                                return TelepathicClient.register(client);
                              };
                              return Jest.Expect[/* toThrow */18](Jest.Expect[/* not_ */23](Jest.Expect[/* expect */0](run)));
                            }));
              }));
        describe("sendMessage(~linkId, ~text)", (function () {
                return Jest.test("uses the WebSocket client to send the message", (function () {
                              var expectedLinkId = "test-uuid";
                              var expectedText = "Test message!";
                              var handleMessage = function (message) {
                                var action;
                                try {
                                  action = Js_option.getExn(TelepathicActions.decode(JSON.parse(message)));
                                }
                                catch (_exn){
                                  action = Js_exn.raiseError("Unable to parse message");
                                }
                                TelepathicUtils.expectMatches("Wrong key", "MESSAGE_SEND", TelepathicActions.key(action));
                                switch (action.tag | 0) {
                                  case 0 : 
                                      TelepathicUtils.expectMatches("Wrong linkId", expectedLinkId, action[0]);
                                      TelepathicUtils.expectMatches("Wrong userName", "Test Name", action[1]);
                                      return TelepathicUtils.expectMatches("Wrong text", expectedText, action[2]);
                                  case 1 : 
                                  case 2 : 
                                      return Js_exn.raiseError("Wrong action");
                                  
                                }
                              };
                              var socket = /* Some */[{
                                  send: handleMessage,
                                  on: (function () {
                                      return /* () */0;
                                    })
                                }];
                              var client = TelepathicClient.make(/* Some */[socket], expectedLinkId, "test-url");
                              var run = function () {
                                return TelepathicClient.sendMessage(expectedLinkId, expectedText, client);
                              };
                              return Jest.Expect[/* toThrow */18](Jest.Expect[/* not_ */23](Jest.Expect[/* expect */0](run)));
                            }));
              }));
        return /* () */0;
      }));

/*  Not a pure module */
